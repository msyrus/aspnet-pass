// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/msyrus/aspnet-pass (interfaces: SaltGenerator)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSaltGenerator is a mock of SaltGenerator interface
type MockSaltGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockSaltGeneratorMockRecorder
}

// MockSaltGeneratorMockRecorder is the mock recorder for MockSaltGenerator
type MockSaltGeneratorMockRecorder struct {
	mock *MockSaltGenerator
}

// NewMockSaltGenerator creates a new mock instance
func NewMockSaltGenerator(ctrl *gomock.Controller) *MockSaltGenerator {
	mock := &MockSaltGenerator{ctrl: ctrl}
	mock.recorder = &MockSaltGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSaltGenerator) EXPECT() *MockSaltGeneratorMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockSaltGenerator) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockSaltGeneratorMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSaltGenerator)(nil).Read), arg0)
}
